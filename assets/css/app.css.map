{"version":3,"sources":["utils/mixins.scss","utils/reset.scss","utils/variables.scss","utils/typography.scss","utils/spacing.scss","utils/utils.scss","blocks/Header.scss","blocks/Work.scss","blocks/Related.scss","blocks/Footer.scss"],"names":[],"mappings":"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EAEzC,mBAAkB;EAClB,mBAAkB;EAClB,eDhFqB,ECiFtB;EHUK;IGhBN;MHkBU,4BA8CkC,EG1D3C,EAAA;EH0CC;IGhDF;MHkDM,gBGjDgD,EAKrD,EAAA;;AAED;EHEI,gBGDuC;EACzC,mBAAkB,EAEnB;EHIK;IGRN;MHUU,4BA8CkC,EGpD3C,EAAA;EHoCC;IGxCF;MH0CM,gBGzCgD,EAGrD,EAAA;;AAED;EHJI,gBGKuC;EACzC,mBAAkB,EAEnB;EHFK;IGFN;MHIU,4BA8CkC,EG9C3C,EAAA;EH8BC;IGlCF;MHoCM,gBGnCgD,EAGrD,EAAA;;AAED;EHVI,gBGWuC;EACzC,mBAAkB,EAEnB;EHRK;IGIN;MHFU,4BA8CkC,EGxC3C,EAAA;EHwBC;IG5BF;MH8BM,gBG7BgD,EAGrD,EAAA;;AAED;EHhBI,gBGiBuC;EACzC,mBAAkB,EAEnB;EHdK;IGUN;MHRU,4BA8CkC,EGlC3C,EAAA;EHkBC;IGtBF;MHwBM,gBGvBgD,EAGrD,EAAA;;AAED;EHtBI,gBGuBuC;EACzC,mBAAkB,EAEnB;EHpBK;IGgBN;MHdU,4BA8CkC,EG5B3C,EAAA;EHYC;IGhBF;MHkBM,gBGjBgD,EAGrD,EAAA;;AFjHD;EEsHE,uEAtHiE;EAwHjE,mBAAkB;EAClB,iBAAgB,EACjB;;ACvHD;EJoFI,kBInF0D;EJmF1D,qBInF0D,EAC7D;EJ4GK;II9GN;MJgHU,0CA0BkC;MA1BlC,6CA0BkC,EIxI3C,EAAA;EJ4GK;II9GN;MJgHU,yCA0BkC;MA1BlC,4CA0BkC,EIxI3C,EAAA;EJ4GK;II9GN;MJgHU,0CA0BkC;MA1BlC,6CA0BkC,EIxI3C,EAAA;EJwHC;II1HF;MJ4HM,kBI3HmE;MJ2HnE,qBI3HmE,EACxE,EAAA;;AAMD;EJ4EI,kBI3E0D;EJ2E1D,qBI3E0D,EAC7D;EJoGK;IItGN;MJwGU,0CA0BkC;MA1BlC,6CA0BkC,EIhI3C,EAAA;EJoGK;IItGN;MJwGU,0CA0BkC;MA1BlC,6CA0BkC,EIhI3C,EAAA;EJoGK;IItGN;MJwGU,0CA0BkC;MA1BlC,6CA0BkC,EIhI3C,EAAA;EJgHC;IIlHF;MJoHM,kBInHmE;MJmHnE,qBInHmE,EACxE,EAAA;;AAQD;EJkEI,mBIrEQ;EJqER,oBIrEQ,EASX;EJkEK;IIxEN;MJ0EU,2CA8CkC;MA9ClC,4CA8CkC,EIlH3C,EAAA;EJkGC;IIxGF;MJ0GM,oBI5GO;MJ4GP,qBI5GO,EAQZ,EAAA;;AAED;EAEE,iBAAgB,EACjB;;AAED;EACE,iBAAgB,EACjB;;AAKD;EACE,cAAa;EACb,oBAAmB;EACnB,mBAAkB;EAClB,oBAAmB,EAYpB;EAhBD;IAOI,QAAO;IJuCP,mBItC4D;IJsC5D,oBItC4D,EAO7D;IJqCG;MIpDN;QJsDU,0CA8CkC;QA9ClC,2CA8CkC,EIrFzC,EAAA;IJqED;MIpFF;QJsFM,mBI9EqE;QJ8ErE,oBI9EqE,EAOxE,EAAA;IAfH;MAUM,YAAW;MACX,gBAAe;MACf,eAAc;MACd,iBAAgB,EACjB;;ACrDL;EACE,iBAAgB,EACjB;;AAED;EACE,WAAU;EACV,qBAAoB,EACrB;;AAED;EACE,iCHXqB;EGYrB,eHZqB,EGgBtB;EAND;IAII,kCHdmB,EGepB;;AAIH;EACE,eAAc,EAIf;ELxBW;IKmBZ;MAGI,cAAa,EAEhB,EAAA;;AAGD;EACE,cAAa,EAId;ELhCW;IK2BZ;MAGI,eAAc,EAEjB,EAAA;;AAED;EACE,cAAa;EACb,wBAAuB,EACxB;;AAID;EACE,oBHxCqB,EGyCtB;;AAED;EACE,oBH9CqB,EG+CtB;;AAID;EACE,cAAa,EACd;;ACvDD;EACE,oBJCqB;EIArB,cAAa;EACb,kBAAiB;EACjB,qBAAoB;EACpB,gBAAe;EACf,YAAW;EACX,SAAQ;EACR,WAAU,EA8CX;EA5CC;IACE,QAAO,EACR;EAED;IACE,gBAAe;IACf,eJXmB,EIYpB;EAED;IACE,QAAO;IACP,kBAAiB,EAClB;EAED;IACE,gBAAe,EAChB;EAED;IAEE,sBAAqB;IACrB,kBAAiB;IACjB,mBAAkB,EAoBnB;IAxBA;MAMG,mBAAkB;MAClB,YAAW;MACX,eAAc;MACd,UAAS;MACT,YAAW;MACX,gBAAe;MACf,oBJrCiB,EIsClB;IAbF;MAgBK,yBAAwB,EAEzB;IAlBJ;MAsBG,eJ7CiB,EI8ClB;;ACnDH;EAEE,oBLCmB;EKAnB,aAAY;EACZ,2BAA0B;EAC1B,eAAc;EACd,mBAAkB;EAClB,iCAAgC,EACjC;;AAED;EACE,mBAAkB;EAClB,UAAS;EACT,eLRmB,EKUpB;;AAED;EACE,mBAAkB;EAClB,aAAY,EAEb;;ACtBH;EAEE,oBNCqB;EMArB,eNGqB,EMGtB;EATD;IAMI,eNAmB,EMCpB;;ACJH;EAEE,oBPCqB,EOgBtB","file":"../scss/app.css","sourcesContent":["\n@mixin xs { @media (max-width: $xs) { @content; } }\n@mixin sm { @media only screen and (min-width: $sm){   @content; } }\n@mixin md { @media only screen and (min-width: $md) {   @content; } }\n@mixin lg { @media only screen and (min-width: $lg) {   @content; } }\n@mixin xl { @media only screen and (min-width: $xl) {   @content; } }\n@mixin super { @media only screen and (min-width: $super) {   @content; } }\n\n@mixin from($from, $to) { @media only screen and (min-width: $from) and (max-width: $to) { @content; } }\n\n@mixin only($size) {\n  @if $size == $phone {\n    @media only screen and (max-width: $phone) {\n      @content;\n    }\n  } @else if $size == $tablet {\n    @media only screen and (min-width: $phone) and (max-width: $laptop - 1px) {\n      @content;\n    }\n  } @else if $size == $laptop {\n    @media only screen and (min-width: $laptop) and (max-width: $desktop - 1px) {\n      @content;\n    }\n  } @else if $size == $desktop {\n    @media only screen and (min-width: $desktop) and (max-width: $super - 1px) {\n      @content;\n    }\n  } @else if $size == $super {\n    @media only screen and (min-width: $super) {\n      @content;\n    }\n  }\n}\n\n@mixin interpolate($properties, $min-screen, $min-value, $max-screen, $max-value, $easing: 'linear', $bending-points: 2) {\n\n  // Default Easing 'Linear'\n  $p0: 0;\n  $p1: 0;\n  $p2: 1;\n  $p3: 1;\n\n  // Parse Cubic Bezier string\n  @if(str-slice($easing, 1, 12) == 'cubic-bezier') {\n    // Get the values between the brackets\n    // TODO: Deal with different whitespace\n    $i: str-index($easing,')'); // Get index of closing bracket\n    $values: str-slice($easing, 14, $i - 1); // Extract values between brackts\n    $list: explode($values, ', '); // Split the values into a list\n    \n    // @debug($list);\n\n    // Cast values to numebrs\n    $p0: number(nth($list, 1));\n    $p1: number(nth($list, 2));\n    $p2: number(nth($list, 3));\n    $p3: number(nth($list, 4));\n\n  } \n\n  @if($easing == 'ease') {\n    $p0: 0.25;\n    $p1: 1;\n    $p2: 0.25;\n    $p3: 1;\n  }\n\n  @if($easing == 'ease-in-out') {\n    $p0: 0.42;\n    $p1: 0;\n    $p2: 0.58;\n    $p3: 1;\n  }\n\n  @if($easing == 'ease-in') {\n    $p0: 0.42;\n    $p1: 0;\n    $p2: 1;\n    $p3: 1;\n  }\n\n  @if($easing == 'ease-out') {\n    $p0: 0;\n    $p1: 0;\n    $p2: 0.58;\n    $p3: 1;\n  }\n\n  @each $property in $properties {\n    #{$property}: $min-value;\n  }\n\n\n  @if($easing == 'linear' or $bending-points < 1) { \n    \n      @media screen and (min-width: $min-screen) {\n        @each $property in $properties {\n          #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n        }\n      }\n\n  } @else {\n\n    // Loop through bending points  \n    $t: 1 / ($bending-points + 1);\n    $i:1;\n    $prev-screen: $min-screen;\n    $prev-value: $min-value;\n\n    @while $t*$i <= 1 {\n      $bending-point: $t*$i;\n      $value: cubic-bezier($p0,$p1,$p2,$p3, $bending-point);\n      $screen-int: lerp($min-screen, $max-screen, $bending-point);  \n      $value-int: lerp($min-value, $max-value, $value);\n\n      @media screen and  (min-width: $prev-screen) {\n        @each $property in $properties {\n          #{$property}: calc-interpolation($prev-screen, $prev-value, $screen-int, $value-int);\n        }\n      }\n\n      $prev-screen: $screen-int;\n      $prev-value: $value-int;\n      $i: $i+1;\n    }\n  }\n\n  @media screen and (min-width:$max-screen) {\n    @each $property in $properties {\n      #{$property}: $max-value; \n    }\n  }\n}\n\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n  $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n  $b: $min-value - $a * $min-screen; \n\n  $sign: \"+\";\n  @if ($b < 0) {\n    $sign: \"-\";\n    $b: abs($b);\n  }\n  @return calc(#{$a*100}vw #{$sign} #{$b});\n}\n\n@function solve-bexier-x($p1x, $p1y, $p2x, $p2y, $x) {\n  \n    $cx: 3.0 * $p1x;\n    $bx: 3.0 * ($p2x - $p1x) - $cx;\n    $ax: 1.0 - $cx -$bx;\n    \n    $t0: 0.0;\n    $t1: 1.0;\n    $t2: $x;\n    $x2: 0;\n    $res: 1000;\n    \n    @while ($t0 < $t1 or $break) {\n      $x2: (($ax * $t2 + $bx) * $t2 + $cx) * $t2;\n      @if (abs($x2 - $x) < $res) {\n        @return $t2;\n      }\n      @if ($x > $x2) {\n        $t0: $t2;\n      } @else {\n        $t1: $t2;\n      }\n      $t2: ($t1 - $t0) * 0.5 + $t0;\n    }\n\n    @return $t2;\n}\n\n@function cubic-bezier($p1x, $p1y, $p2x, $p2y, $x) {\n  $cy: 3.0 * $p1y;\n  $by: 3.0 * ($p2y - $p1y) - $cy;\n  $ay: 1.0 - $cy - $by;\n  $t: solve-bexier-x($p1x, $p1y, $p2x, $p2y, $x);\n  @return (($ay * $t + $by) * $t + $cy) * $t;\n}\n\n@function lerp($a, $b, $t) {\n  @return $a + ($b - $a) * $t;\n} \n\n@function number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: log('Value for `to-number` should be a number or a string.');\n  }\n\n  $result: 0;\n  $digits: 0;\n  $minus: str-slice($value, 1, 1) == '-';\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  @for $i from if($minus, 2, 1) through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n        }\n\n    @if $character == '.' {\n      $digits: 1; \n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);  \n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);;\n}\n\n@function explode($string, $delimiter) {\n  $result: ();\n  @if $delimiter == \"\" {\n    @for $i from 1 through str-length($string) {\n      $result: append($result, str-slice($string, $i, $i));\n    }\n    @return $result;\n  }\n  $exploding: true;\n  @while $exploding {\n    $d-index: str-index($string, $delimiter);\n    @if $d-index {\n      @if $d-index > 1 {\n        $result: append($result, str-slice($string, 1, $d-index - 1));\n        $string: str-slice($string, $d-index + str-length($delimiter));\n      } @else if $d-index == 1 {\n        $string: str-slice($string, 1, $d-index + str-length($delimiter));\n      } @else {\n        $result: append($result, $string);\n        $exploding: false;\n      }\n    } @else {\n      $result: append($result, $string);\n      $exploding: false;\n    }\n  }\n  @return $result;\n}\n\n\n// @mixin wrap {\n//   @include interpolate((padding-left, padding-right), $sm, 20px, $xl, 180px, $interpolateEase);\n//   @include super {\n//     padding-left: calc((100vw - 1500px) / 2);\n//     padding-right: calc((100vw - 1500px) / 2);\n//   }\n// }\n\n\n/// Examples in use\n.classic-linear { @include interpolate('font-size', 600px, 12px, 900px, 24px);  }\n.easy-peasy { @include interpolate('font-size', 600px, 12px, 900px, 24px, 'ease-in'); }\n.cubic-bezier { @include interpolate('font-size', 600px, 12px, 900px, 24px, 'cubic-bezier(0.755, 0.05, 0.855, 0.06)'); }\n.bloat-my-css { @include interpolate('font-size', 600px, 12px, 900px, 24px, 'ease-in-ease-out', 6); }\n\n","* { margin: 0; padding: 0; border: 0; font-size: 100%; font: inherit; vertical-align: baseline; box-sizing: border-box; text-decoration: none; }\narticle, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section { display: block; }\nbody {  line-height: 1; -webkit-font-smoothing: antialiased; }\nol, ul { list-style: none; }\nblockquote, q { quotes: none; &:before, &:after { content: ''; content: none; } }\ntable { border-collapse: collapse; border-spacing: 0; }\nimg { max-width: 100%; height: auto; }\n\nli    { list-style-type: none; }\ninput { border-top-left-radius: 0px; border-top-right-radius: 0px; }\n::selection { background: $grey; color: $black;}\nh1, h2, h3, h4, h5, h6, p, span, address, li { color: $black; }\n\n.ajax { min-height: 100vh; }\nimg { opacity: 1; transition: opacity $ease 0.3s; }\nimg[data-src] { opacity: 0; }\nimg[data-src].loaded { opacity: 1; }\n\n\n","// Variables\n\n// Colours \n$black:         #474B5B;\n$red:           #FD6270;\n$grey:          #CCD6DF;\n$white:         #FFFFFF;\n\n// Media Query Breakpoints\n$xs: 480px; $sm: 768px;  $md: 1024px; $lg: 1440px;  $xl: 1600px; $super: 2000px;\n\n// Animation / Interpolation\n$ease: cubic-bezier(0.645, 0.045, 0.355, 1);\n$interpolateEase: 'cubic-bezier(0.95, 0.05, 0.795, 0.035)';\n","// Font Variables \n$custom: \"Ballinger\";\n$family: #{$custom}, \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n \n$custom2: \"Ballinger Mono\";\n$mono: #{$custom2}, \"Lucida Console\", Monaco, monospace;\n\n\n// Fonts\n@font-face {\n  font-family: $custom;\n  src:  url(/assets/fonts/MetricWeb-Medium.eot) format(\"eot\");\n  src:  url(/assets/fonts/MetricWeb-Medium.woff) format(\"woff\");\n  font-weight: 700;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: $custom;\n  src:  url(/assets/fonts/MetricWeb-Regular.eot) format(\"eot\");\n  src:  url(/assets/fonts/MetricWeb-Regular.woff) format(\"woff\");\n  font-weight: 400;\n  font-style: normal;\n}\n\n.ballinger { font-family: $family; }\n.mono { font-family: $mono; }\n\n\n// Character Styles \n.bold     { font-weight: 700; }\n.regular  { font-weight: 400; }\n.light    { font-weight: 100; }\n\n.italic   { font-style: italic;  }\n.caps     { text-transform: uppercase; }\n.display  { text-transform: uppercase; letter-spacing: -1px; }\n\n\n\n// Type Styles\n\n.t-nav { \n  @include interpolate(font-size, $sm, 16px, $xl, 18px);\n  line-height: 1.2em;\n  @extend .bold;\n}\n\n.t-big {\n  @include interpolate(font-size, $sm, 65px, $xl, 65px);\n  line-height: 1.2em;\n  @extend .light;  \n}\n\n.t-clientlist {\n  @include interpolate(font-size, $sm, 28px, $xl, 28px);\n  line-height: 2.4em;\n  @extend .light;  \n}\n\n.t-copyright {\n  @include interpolate(font-size, $sm, 12px, $xl, 12px);\n  line-height: 1.2em;\n  @extend .mono, .regular;  \n}\n\n.t-footer {\n  @include interpolate(font-size, $sm, 14px, $xl, 14px);\n  line-height: 1.2em;\n  @extend .regular;  \n}\n\n.t-client {\n  @include interpolate(font-size, $sm, 14px, $xl, 14px);\n  line-height: 1.2em;\n  @extend .mono, .regular;  \n}\n\n\n.t-header {\n  @include interpolate(font-size, $sm, 21px, $xl, 21px);\n  @extend .bold;  \n  line-height: 1.2em;\n  margin-bottom: 5px;\n  color: $red;\n}\n\n.t-title {\n  @include interpolate(font-size, $sm, 34px, $xl, 34px);\n  line-height: 1.2em;\n  @extend .bold;  \n}\n\n.t-deck {\n  @include interpolate(font-size, $sm, 21px, $xl, 21px);\n  line-height: 1.2em;\n  @extend .light;  \n}\n\n.t-caption {\n  @include interpolate(font-size, $sm, 14px, $xl, 14px);\n  line-height: 1.2em;\n  @extend .mono, .regular;  \n}\n\n.t-quote {\n  @include interpolate(font-size, $sm, 64px, $xl, 64px);\n  line-height: 1.2em;\n  @extend .bold;\n}\n\n.t-text {\n  @include interpolate(font-size, $sm, 21px, $xl, 21px);\n  line-height: 1.4em;\n  @extend .regular;  \n}\n\n\n// Defaults\nbody  { \n  font-family: $family;\n  @extend .t-text;\n  line-height: 1.2em;\n  font-weight: 400;\n}\n\n// a {\n//   @include interpolate(font-size, $sm, 16px, $xl, 18px); \n//   line-height: 1em;\n// }\n\n// p {\n//   @extend .t-text;\n// }\n\n// p, address, li { \n//   @extend .t-text;\n// }\n\n// strong { @extend .bold; }\n\n// h1    { \n//   @extend .t-big;\n// }\n\n// h2    {\n//   @extend .t-title;\n// }\n\n// h3    { \n//   @extend .t-clientlist;\n// }\n\n// h4    { \n//   @include interpolate(font-size, $sm, 20px, $xl, 28px);\n//   line-height: 1.2em;\n// }\n\n// h5    { \n//   @include interpolate(font-size, $sm, 18px, $xl, 22px);\n//   line-height: 1.2em;\n// }\n\n// h6    { \n//   @include interpolate(font-size, $md, 16px, $xl, 21px);\n//   line-height: 1.2em;\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","\n// Vertical Spacing\n\n// h1, h2, h3, h4, ul, p { @include interpolate(padding-bottom, $sm, 10px, $xl, 20px, $interpolateEase); }\n\nsection {\n  @include interpolate((padding-top,padding-bottom), $sm, 20px, $xl, 40px, $interpolateEase);\n}\n\nheader.header {\n//    @include interpolate((padding-top,padding-bottom), $sm, 20px, $xl, 30px, $interpolateEase);\n}\n\nfooter {\n  @include interpolate((padding-top,padding-bottom), $sm, 30px, $xl, 50px, $interpolateEase);\n}\n\n\n// Horizontal Spacing\n$maxWidth: 1600px;\n$h-min: 30px;\n$h-max: 100px;\n\n.wrap {\n  @include interpolate((padding-left,padding-right), $sm, $h-min, $xl, $h-max);\n  @include super {\n    // padding-left: calc((100vw - $maxWidth) / 2);\n    // padding-right: calc((100vw - $maxWidth) / 2);\n  }\n}\n\nsection, header, footer {\n  @extend .wrap;\n  overflow: hidden;\n}\n\nmain {\n  margin-top: 70px;\n}\n\n\n// Grid\n\n.mesh {\n  display: flex;\n  flex-flow: row wrap;\n  margin-left: -20px;\n  margin-right: -20px;\n  // background: $red;\n  & > div {\n    flex: 1;\n    @include interpolate((padding-left,padding-right), $sm, 10px, $xl, 20px);\n    img {\n      width: 100%;\n      height: inherit;\n      display: block;\n      line-height: 0px;\n    }\n  }\n}","\n// Utilities\n\n// Body Utilities – Lock Scroll\n.body--locked {\n  overflow: hidden;\n}\n\n.u-hide {\n  opacity: 0;\n  pointer-events: none;\n}\n\n.u-link {\n  border-bottom: 1px solid $black;\n  color: $black;\n  &:hover {\n    border-bottom: 1px dotted $black;\n  }\n}\n\n// only show on mobile/tablet\n.u-mobile {\n  display: block;\n  @include md {\n    display: none;\n  }\n}\n\n// only show on desktop\n.u-desktop {\n  display: none;\n  @include md {\n    display: block;\n  }\n}\n\n.u-center {\n  display: flex;\n  justify-content: center;\n}\n\n\n// Colours Backgrounds\n.grey {\n  background: $grey;\n}\n\n.black {\n  background: $black;\n}\n\n\n// Hide for Work In Progress\n.wip {\n  display: none;\n}","\n.header {\n  background: $black;\n  display: flex;\n  padding-top: 20px;\n  padding-bottom: 20px;\n  position: fixed;\n  width: 100%;\n  top: 0px;\n  z-index: 1;\n\n  &_brand {\n    flex: 1;\n  }\n\n  &_emblem {\n    display: inline;\n    color: $white;\n  }\n\n  &_nav {\n    flex: 1;\n    text-align: right;\n  }\n\n  &_menu {\n    display: inline;\n  }\n\n  &_menuitem {\n    @extend .t-nav;\n    display: inline-block;\n    padding: 5px 10px;\n    position: relative;\n    &:after {\n      position: absolute;\n      content: '';\n      display: block;\n      width: 0%;\n      height: 4px;\n      margin-top: 2px;\n      background: $red;\n    }\n    &.active {\n      &:after {\n        width: calc(100% - 20px);\n        \n      }\n    }\n\n    a {\n      color: $white;\n    }\n  }\n\n}\n",".work {\n  &_introvideo { \n    @extend .wrap;\n    background: $red;\n    width: 100vw;\n    height: calc(100vh - 70px);\n    display: block;\n    position: relative;\n    max-height: calc(100vw * 0.5625);\n  }\n\n  &_welcome {\n    position: absolute;\n    top: 20px;\n    color: $white;\n    @extend .t-nav;\n  }\n\n  &_tagline {\n    position: absolute;\n    bottom: 50px;\n    @extend .t-big;\n  }\n\n  &_casestudies {\n\n  }\n\n}",".related {\n\n  background: $black;\n  color: $white;\n  \n  h3 {\n    color: $white;\n  }\n  \n}","\n\n\n.footer {\n\n  background: $white;\n\n  &_logo {\n\n  }\n\n  &_copyright {\n\n  }\n\n  &_nav {\n\n  }\n\n  &_social {\n\n  }\n}\n"]}