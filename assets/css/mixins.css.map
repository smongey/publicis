{"version":3,"sources":["mixins.scss"],"names":[],"mappings":"AAkQA;EAzKI,gBAyK2D,EAAmB;EAnK5E;IAmKN;MAjKU,4BA8CkC,EAmHsC,EAAA;EAnIhF;IAmIF;MAjIM,gBAiIsE,EAAM,EAAA;;AAClF;EA1KI,gBA0KuD,EAA6B;EAhJlF;IAgJN;MA9IU,uCA0BkC,EAoH4C,EAAA;EAhJlF;IAgJN;MA9IU,wCA0BkC,EAoH4C,EAAA;EAhJlF;IAgJN;MA9IU,iCA0BkC,EAoH4C,EAAA;EApItF;IAoIF;MAlIM,gBAkIkE,EAAgB,EAAA;;AACxF;EA3KI,gBA2KyD,EAA4D;EAjJnH;IAiJN;MA/IU,uCA0BkC,EAqH6E,EAAA;EAjJnH;IAiJN;MA/IU,uCA0BkC,EAqH6E,EAAA;EAjJnH;IAiJN;MA/IU,qCA0BkC,EAqH6E,EAAA;EArIvH;IAqIF;MAnIM,gBAmIoE,EAA+C,EAAA;;AACzH;EA5KI,gBA4KyD,EAAyC;EAlJhG;IAkJN;MAhJU,uCA0BkC,EAsH0D,EAAA;EAlJhG;IAkJN;MAhJU,kCA0BkC,EAsH0D,EAAA;EAlJhG;IAkJN;MAhJU,wCA0BkC,EAsH0D,EAAA;EAlJhG;IAkJN;MAhJU,wCA0BkC,EAsH0D,EAAA;EAlJhG;IAkJN;MAhJU,wCA0BkC,EAsH0D,EAAA;EAlJhG;IAkJN;MAhJU,kCA0BkC,EAsH0D,EAAA;EAlJhG;IAkJN;MAhJU,wCA0BkC,EAsH0D,EAAA;EAtIpG;IAsIF;MApIM,gBAoIoE,EAA4B,EAAA","file":"../scss/mixins.css","sourcesContent":["\n@mixin xs { @media (max-width: $xs) { @content; } }\n@mixin sm { @media only screen and (min-width: $sm){   @content; } }\n@mixin md { @media only screen and (min-width: $md) {   @content; } }\n@mixin lg { @media only screen and (min-width: $lg) {   @content; } }\n@mixin xl { @media only screen and (min-width: $xl) {   @content; } }\n@mixin super { @media only screen and (min-width: $super) {   @content; } }\n\n@mixin from($from, $to) { @media only screen and (min-width: $from) and (max-width: $to) { @content; } }\n\n@mixin only($size) {\n  @if $size == $phone {\n    @media only screen and (max-width: $phone) {\n      @content;\n    }\n  } @else if $size == $tablet {\n    @media only screen and (min-width: $phone) and (max-width: $laptop - 1px) {\n      @content;\n    }\n  } @else if $size == $laptop {\n    @media only screen and (min-width: $laptop) and (max-width: $desktop - 1px) {\n      @content;\n    }\n  } @else if $size == $desktop {\n    @media only screen and (min-width: $desktop) and (max-width: $super - 1px) {\n      @content;\n    }\n  } @else if $size == $super {\n    @media only screen and (min-width: $super) {\n      @content;\n    }\n  }\n}\n\n@mixin interpolate($properties, $min-screen, $min-value, $max-screen, $max-value, $easing: 'linear', $bending-points: 2) {\n\n  // Default Easing 'Linear'\n  $p0: 0;\n  $p1: 0;\n  $p2: 1;\n  $p3: 1;\n\n  // Parse Cubic Bezier string\n  @if(str-slice($easing, 1, 12) == 'cubic-bezier') {\n    // Get the values between the brackets\n    // TODO: Deal with different whitespace\n    $i: str-index($easing,')'); // Get index of closing bracket\n    $values: str-slice($easing, 14, $i - 1); // Extract values between brackts\n    $list: explode($values, ', '); // Split the values into a list\n    \n    // @debug($list);\n\n    // Cast values to numebrs\n    $p0: number(nth($list, 1));\n    $p1: number(nth($list, 2));\n    $p2: number(nth($list, 3));\n    $p3: number(nth($list, 4));\n\n  } \n\n  @if($easing == 'ease') {\n    $p0: 0.25;\n    $p1: 1;\n    $p2: 0.25;\n    $p3: 1;\n  }\n\n  @if($easing == 'ease-in-out') {\n    $p0: 0.42;\n    $p1: 0;\n    $p2: 0.58;\n    $p3: 1;\n  }\n\n  @if($easing == 'ease-in') {\n    $p0: 0.42;\n    $p1: 0;\n    $p2: 1;\n    $p3: 1;\n  }\n\n  @if($easing == 'ease-out') {\n    $p0: 0;\n    $p1: 0;\n    $p2: 0.58;\n    $p3: 1;\n  }\n\n  @each $property in $properties {\n    #{$property}: $min-value;\n  }\n\n\n  @if($easing == 'linear' or $bending-points < 1) { \n    \n      @media screen and (min-width: $min-screen) {\n        @each $property in $properties {\n          #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n        }\n      }\n\n  } @else {\n\n    // Loop through bending points  \n    $t: 1 / ($bending-points + 1);\n    $i:1;\n    $prev-screen: $min-screen;\n    $prev-value: $min-value;\n\n    @while $t*$i <= 1 {\n      $bending-point: $t*$i;\n      $value: cubic-bezier($p0,$p1,$p2,$p3, $bending-point);\n      $screen-int: lerp($min-screen, $max-screen, $bending-point);  \n      $value-int: lerp($min-value, $max-value, $value);\n\n      @media screen and  (min-width: $prev-screen) {\n        @each $property in $properties {\n          #{$property}: calc-interpolation($prev-screen, $prev-value, $screen-int, $value-int);\n        }\n      }\n\n      $prev-screen: $screen-int;\n      $prev-value: $value-int;\n      $i: $i+1;\n    }\n  }\n\n  @media screen and (min-width:$max-screen) {\n    @each $property in $properties {\n      #{$property}: $max-value; \n    }\n  }\n}\n\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n  $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n  $b: $min-value - $a * $min-screen; \n\n  $sign: \"+\";\n  @if ($b < 0) {\n    $sign: \"-\";\n    $b: abs($b);\n  }\n  @return calc(#{$a*100}vw #{$sign} #{$b});\n}\n\n@function solve-bexier-x($p1x, $p1y, $p2x, $p2y, $x) {\n  \n    $cx: 3.0 * $p1x;\n    $bx: 3.0 * ($p2x - $p1x) - $cx;\n    $ax: 1.0 - $cx -$bx;\n    \n    $t0: 0.0;\n    $t1: 1.0;\n    $t2: $x;\n    $x2: 0;\n    $res: 1000;\n    \n    @while ($t0 < $t1 or $break) {\n      $x2: (($ax * $t2 + $bx) * $t2 + $cx) * $t2;\n      @if (abs($x2 - $x) < $res) {\n        @return $t2;\n      }\n      @if ($x > $x2) {\n        $t0: $t2;\n      } @else {\n        $t1: $t2;\n      }\n      $t2: ($t1 - $t0) * 0.5 + $t0;\n    }\n\n    @return $t2;\n}\n\n@function cubic-bezier($p1x, $p1y, $p2x, $p2y, $x) {\n  $cy: 3.0 * $p1y;\n  $by: 3.0 * ($p2y - $p1y) - $cy;\n  $ay: 1.0 - $cy - $by;\n  $t: solve-bexier-x($p1x, $p1y, $p2x, $p2y, $x);\n  @return (($ay * $t + $by) * $t + $cy) * $t;\n}\n\n@function lerp($a, $b, $t) {\n  @return $a + ($b - $a) * $t;\n} \n\n@function number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: log('Value for `to-number` should be a number or a string.');\n  }\n\n  $result: 0;\n  $digits: 0;\n  $minus: str-slice($value, 1, 1) == '-';\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  @for $i from if($minus, 2, 1) through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n        }\n\n    @if $character == '.' {\n      $digits: 1; \n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);  \n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);;\n}\n\n@function explode($string, $delimiter) {\n  $result: ();\n  @if $delimiter == \"\" {\n    @for $i from 1 through str-length($string) {\n      $result: append($result, str-slice($string, $i, $i));\n    }\n    @return $result;\n  }\n  $exploding: true;\n  @while $exploding {\n    $d-index: str-index($string, $delimiter);\n    @if $d-index {\n      @if $d-index > 1 {\n        $result: append($result, str-slice($string, 1, $d-index - 1));\n        $string: str-slice($string, $d-index + str-length($delimiter));\n      } @else if $d-index == 1 {\n        $string: str-slice($string, 1, $d-index + str-length($delimiter));\n      } @else {\n        $result: append($result, $string);\n        $exploding: false;\n      }\n    } @else {\n      $result: append($result, $string);\n      $exploding: false;\n    }\n  }\n  @return $result;\n}\n\n\n// @mixin wrap {\n//   @include interpolate((padding-left, padding-right), $sm, 20px, $xl, 180px, $interpolateEase);\n//   @include super {\n//     padding-left: calc((100vw - 1500px) / 2);\n//     padding-right: calc((100vw - 1500px) / 2);\n//   }\n// }\n\n\n/// Examples in use\n.classic-linear { @include interpolate('font-size', 600px, 12px, 900px, 24px);  }\n.easy-peasy { @include interpolate('font-size', 600px, 12px, 900px, 24px, 'ease-in'); }\n.cubic-bezier { @include interpolate('font-size', 600px, 12px, 900px, 24px, 'cubic-bezier(0.755, 0.05, 0.855, 0.06)'); }\n.bloat-my-css { @include interpolate('font-size', 600px, 12px, 900px, 24px, 'ease-in-ease-out', 6); }\n\n"]}